// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"edu.cheap.api/internal/dal/dal/model"
)

func newEnrollment(db *gorm.DB, opts ...gen.DOOption) enrollment {
	_enrollment := enrollment{}

	_enrollment.enrollmentDo.UseDB(db, opts...)
	_enrollment.enrollmentDo.UseModel(&model.Enrollment{})

	tableName := _enrollment.enrollmentDo.TableName()
	_enrollment.ALL = field.NewAsterisk(tableName)
	_enrollment.ID = field.NewString(tableName, "id")
	_enrollment.UserID = field.NewString(tableName, "user_id")
	_enrollment.CourseID = field.NewString(tableName, "course_id")
	_enrollment.EnrolledAt = field.NewTime(tableName, "enrolled_at")
	_enrollment.Progress = field.NewFloat64(tableName, "progress")

	_enrollment.fillFieldMap()

	return _enrollment
}

type enrollment struct {
	enrollmentDo enrollmentDo

	ALL        field.Asterisk
	ID         field.String
	UserID     field.String
	CourseID   field.String
	EnrolledAt field.Time
	Progress   field.Float64

	fieldMap map[string]field.Expr
}

func (e enrollment) Table(newTableName string) *enrollment {
	e.enrollmentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e enrollment) As(alias string) *enrollment {
	e.enrollmentDo.DO = *(e.enrollmentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *enrollment) updateTableName(table string) *enrollment {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.UserID = field.NewString(table, "user_id")
	e.CourseID = field.NewString(table, "course_id")
	e.EnrolledAt = field.NewTime(table, "enrolled_at")
	e.Progress = field.NewFloat64(table, "progress")

	e.fillFieldMap()

	return e
}

func (e *enrollment) WithContext(ctx context.Context) IEnrollmentDo {
	return e.enrollmentDo.WithContext(ctx)
}

func (e enrollment) TableName() string { return e.enrollmentDo.TableName() }

func (e enrollment) Alias() string { return e.enrollmentDo.Alias() }

func (e enrollment) Columns(cols ...field.Expr) gen.Columns { return e.enrollmentDo.Columns(cols...) }

func (e *enrollment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *enrollment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["course_id"] = e.CourseID
	e.fieldMap["enrolled_at"] = e.EnrolledAt
	e.fieldMap["progress"] = e.Progress
}

func (e enrollment) clone(db *gorm.DB) enrollment {
	e.enrollmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e enrollment) replaceDB(db *gorm.DB) enrollment {
	e.enrollmentDo.ReplaceDB(db)
	return e
}

type enrollmentDo struct{ gen.DO }

type IEnrollmentDo interface {
	gen.SubQuery
	Debug() IEnrollmentDo
	WithContext(ctx context.Context) IEnrollmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEnrollmentDo
	WriteDB() IEnrollmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEnrollmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnrollmentDo
	Not(conds ...gen.Condition) IEnrollmentDo
	Or(conds ...gen.Condition) IEnrollmentDo
	Select(conds ...field.Expr) IEnrollmentDo
	Where(conds ...gen.Condition) IEnrollmentDo
	Order(conds ...field.Expr) IEnrollmentDo
	Distinct(cols ...field.Expr) IEnrollmentDo
	Omit(cols ...field.Expr) IEnrollmentDo
	Join(table schema.Tabler, on ...field.Expr) IEnrollmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnrollmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnrollmentDo
	Group(cols ...field.Expr) IEnrollmentDo
	Having(conds ...gen.Condition) IEnrollmentDo
	Limit(limit int) IEnrollmentDo
	Offset(offset int) IEnrollmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnrollmentDo
	Unscoped() IEnrollmentDo
	Create(values ...*model.Enrollment) error
	CreateInBatches(values []*model.Enrollment, batchSize int) error
	Save(values ...*model.Enrollment) error
	First() (*model.Enrollment, error)
	Take() (*model.Enrollment, error)
	Last() (*model.Enrollment, error)
	Find() ([]*model.Enrollment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Enrollment, err error)
	FindInBatches(result *[]*model.Enrollment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Enrollment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnrollmentDo
	Assign(attrs ...field.AssignExpr) IEnrollmentDo
	Joins(fields ...field.RelationField) IEnrollmentDo
	Preload(fields ...field.RelationField) IEnrollmentDo
	FirstOrInit() (*model.Enrollment, error)
	FirstOrCreate() (*model.Enrollment, error)
	FindByPage(offset int, limit int) (result []*model.Enrollment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnrollmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e enrollmentDo) Debug() IEnrollmentDo {
	return e.withDO(e.DO.Debug())
}

func (e enrollmentDo) WithContext(ctx context.Context) IEnrollmentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e enrollmentDo) ReadDB() IEnrollmentDo {
	return e.Clauses(dbresolver.Read)
}

func (e enrollmentDo) WriteDB() IEnrollmentDo {
	return e.Clauses(dbresolver.Write)
}

func (e enrollmentDo) Session(config *gorm.Session) IEnrollmentDo {
	return e.withDO(e.DO.Session(config))
}

func (e enrollmentDo) Clauses(conds ...clause.Expression) IEnrollmentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e enrollmentDo) Returning(value interface{}, columns ...string) IEnrollmentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e enrollmentDo) Not(conds ...gen.Condition) IEnrollmentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e enrollmentDo) Or(conds ...gen.Condition) IEnrollmentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e enrollmentDo) Select(conds ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e enrollmentDo) Where(conds ...gen.Condition) IEnrollmentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e enrollmentDo) Order(conds ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e enrollmentDo) Distinct(cols ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e enrollmentDo) Omit(cols ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e enrollmentDo) Join(table schema.Tabler, on ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e enrollmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e enrollmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e enrollmentDo) Group(cols ...field.Expr) IEnrollmentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e enrollmentDo) Having(conds ...gen.Condition) IEnrollmentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e enrollmentDo) Limit(limit int) IEnrollmentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e enrollmentDo) Offset(offset int) IEnrollmentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e enrollmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnrollmentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e enrollmentDo) Unscoped() IEnrollmentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e enrollmentDo) Create(values ...*model.Enrollment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e enrollmentDo) CreateInBatches(values []*model.Enrollment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e enrollmentDo) Save(values ...*model.Enrollment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e enrollmentDo) First() (*model.Enrollment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enrollment), nil
	}
}

func (e enrollmentDo) Take() (*model.Enrollment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enrollment), nil
	}
}

func (e enrollmentDo) Last() (*model.Enrollment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enrollment), nil
	}
}

func (e enrollmentDo) Find() ([]*model.Enrollment, error) {
	result, err := e.DO.Find()
	return result.([]*model.Enrollment), err
}

func (e enrollmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Enrollment, err error) {
	buf := make([]*model.Enrollment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e enrollmentDo) FindInBatches(result *[]*model.Enrollment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e enrollmentDo) Attrs(attrs ...field.AssignExpr) IEnrollmentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e enrollmentDo) Assign(attrs ...field.AssignExpr) IEnrollmentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e enrollmentDo) Joins(fields ...field.RelationField) IEnrollmentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e enrollmentDo) Preload(fields ...field.RelationField) IEnrollmentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e enrollmentDo) FirstOrInit() (*model.Enrollment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enrollment), nil
	}
}

func (e enrollmentDo) FirstOrCreate() (*model.Enrollment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enrollment), nil
	}
}

func (e enrollmentDo) FindByPage(offset int, limit int) (result []*model.Enrollment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e enrollmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e enrollmentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e enrollmentDo) Delete(models ...*model.Enrollment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *enrollmentDo) withDO(do gen.Dao) *enrollmentDo {
	e.DO = *do.(*gen.DO)
	return e
}
