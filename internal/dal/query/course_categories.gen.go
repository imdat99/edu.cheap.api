// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"edu.cheap.api/internal/dal/dal/model"
)

func newCourseCategory(db *gorm.DB, opts ...gen.DOOption) courseCategory {
	_courseCategory := courseCategory{}

	_courseCategory.courseCategoryDo.UseDB(db, opts...)
	_courseCategory.courseCategoryDo.UseModel(&model.CourseCategory{})

	tableName := _courseCategory.courseCategoryDo.TableName()
	_courseCategory.ALL = field.NewAsterisk(tableName)
	_courseCategory.CourseID = field.NewString(tableName, "course_id")
	_courseCategory.CategoryID = field.NewString(tableName, "category_id")

	_courseCategory.fillFieldMap()

	return _courseCategory
}

type courseCategory struct {
	courseCategoryDo courseCategoryDo

	ALL        field.Asterisk
	CourseID   field.String
	CategoryID field.String

	fieldMap map[string]field.Expr
}

func (c courseCategory) Table(newTableName string) *courseCategory {
	c.courseCategoryDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseCategory) As(alias string) *courseCategory {
	c.courseCategoryDo.DO = *(c.courseCategoryDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseCategory) updateTableName(table string) *courseCategory {
	c.ALL = field.NewAsterisk(table)
	c.CourseID = field.NewString(table, "course_id")
	c.CategoryID = field.NewString(table, "category_id")

	c.fillFieldMap()

	return c
}

func (c *courseCategory) WithContext(ctx context.Context) ICourseCategoryDo {
	return c.courseCategoryDo.WithContext(ctx)
}

func (c courseCategory) TableName() string { return c.courseCategoryDo.TableName() }

func (c courseCategory) Alias() string { return c.courseCategoryDo.Alias() }

func (c courseCategory) Columns(cols ...field.Expr) gen.Columns {
	return c.courseCategoryDo.Columns(cols...)
}

func (c *courseCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseCategory) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["course_id"] = c.CourseID
	c.fieldMap["category_id"] = c.CategoryID
}

func (c courseCategory) clone(db *gorm.DB) courseCategory {
	c.courseCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseCategory) replaceDB(db *gorm.DB) courseCategory {
	c.courseCategoryDo.ReplaceDB(db)
	return c
}

type courseCategoryDo struct{ gen.DO }

type ICourseCategoryDo interface {
	gen.SubQuery
	Debug() ICourseCategoryDo
	WithContext(ctx context.Context) ICourseCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICourseCategoryDo
	WriteDB() ICourseCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICourseCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICourseCategoryDo
	Not(conds ...gen.Condition) ICourseCategoryDo
	Or(conds ...gen.Condition) ICourseCategoryDo
	Select(conds ...field.Expr) ICourseCategoryDo
	Where(conds ...gen.Condition) ICourseCategoryDo
	Order(conds ...field.Expr) ICourseCategoryDo
	Distinct(cols ...field.Expr) ICourseCategoryDo
	Omit(cols ...field.Expr) ICourseCategoryDo
	Join(table schema.Tabler, on ...field.Expr) ICourseCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryDo
	Group(cols ...field.Expr) ICourseCategoryDo
	Having(conds ...gen.Condition) ICourseCategoryDo
	Limit(limit int) ICourseCategoryDo
	Offset(offset int) ICourseCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseCategoryDo
	Unscoped() ICourseCategoryDo
	Create(values ...*model.CourseCategory) error
	CreateInBatches(values []*model.CourseCategory, batchSize int) error
	Save(values ...*model.CourseCategory) error
	First() (*model.CourseCategory, error)
	Take() (*model.CourseCategory, error)
	Last() (*model.CourseCategory, error)
	Find() ([]*model.CourseCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseCategory, err error)
	FindInBatches(result *[]*model.CourseCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CourseCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICourseCategoryDo
	Assign(attrs ...field.AssignExpr) ICourseCategoryDo
	Joins(fields ...field.RelationField) ICourseCategoryDo
	Preload(fields ...field.RelationField) ICourseCategoryDo
	FirstOrInit() (*model.CourseCategory, error)
	FirstOrCreate() (*model.CourseCategory, error)
	FindByPage(offset int, limit int) (result []*model.CourseCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICourseCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c courseCategoryDo) Debug() ICourseCategoryDo {
	return c.withDO(c.DO.Debug())
}

func (c courseCategoryDo) WithContext(ctx context.Context) ICourseCategoryDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseCategoryDo) ReadDB() ICourseCategoryDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseCategoryDo) WriteDB() ICourseCategoryDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseCategoryDo) Session(config *gorm.Session) ICourseCategoryDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseCategoryDo) Clauses(conds ...clause.Expression) ICourseCategoryDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseCategoryDo) Returning(value interface{}, columns ...string) ICourseCategoryDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseCategoryDo) Not(conds ...gen.Condition) ICourseCategoryDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseCategoryDo) Or(conds ...gen.Condition) ICourseCategoryDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseCategoryDo) Select(conds ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseCategoryDo) Where(conds ...gen.Condition) ICourseCategoryDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseCategoryDo) Order(conds ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseCategoryDo) Distinct(cols ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseCategoryDo) Omit(cols ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseCategoryDo) Join(table schema.Tabler, on ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseCategoryDo) Group(cols ...field.Expr) ICourseCategoryDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseCategoryDo) Having(conds ...gen.Condition) ICourseCategoryDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseCategoryDo) Limit(limit int) ICourseCategoryDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseCategoryDo) Offset(offset int) ICourseCategoryDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICourseCategoryDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseCategoryDo) Unscoped() ICourseCategoryDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseCategoryDo) Create(values ...*model.CourseCategory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseCategoryDo) CreateInBatches(values []*model.CourseCategory, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseCategoryDo) Save(values ...*model.CourseCategory) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseCategoryDo) First() (*model.CourseCategory, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseCategory), nil
	}
}

func (c courseCategoryDo) Take() (*model.CourseCategory, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseCategory), nil
	}
}

func (c courseCategoryDo) Last() (*model.CourseCategory, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseCategory), nil
	}
}

func (c courseCategoryDo) Find() ([]*model.CourseCategory, error) {
	result, err := c.DO.Find()
	return result.([]*model.CourseCategory), err
}

func (c courseCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseCategory, err error) {
	buf := make([]*model.CourseCategory, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseCategoryDo) FindInBatches(result *[]*model.CourseCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseCategoryDo) Attrs(attrs ...field.AssignExpr) ICourseCategoryDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseCategoryDo) Assign(attrs ...field.AssignExpr) ICourseCategoryDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseCategoryDo) Joins(fields ...field.RelationField) ICourseCategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseCategoryDo) Preload(fields ...field.RelationField) ICourseCategoryDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseCategoryDo) FirstOrInit() (*model.CourseCategory, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseCategory), nil
	}
}

func (c courseCategoryDo) FirstOrCreate() (*model.CourseCategory, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseCategory), nil
	}
}

func (c courseCategoryDo) FindByPage(offset int, limit int) (result []*model.CourseCategory, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseCategoryDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseCategoryDo) Delete(models ...*model.CourseCategory) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseCategoryDo) withDO(do gen.Dao) *courseCategoryDo {
	c.DO = *do.(*gen.DO)
	return c
}
